package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/victor-bologna/pos-curso-go-expert-clean-architecture/internal/infra/graph/model"
	"github.com/victor-bologna/pos-curso-go-expert-clean-architecture/internal/usecase"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input *model.OrderRequest) (*model.OrderResponse, error) {
	dto := usecase.InputOrderDTO{
		ID:    input.ID,
		Price: float64(input.Price),
		Tax:   float64(input.Tax),
	}
	output, err := r.CreateOrderUseCase.Execute(dto)
	if err != nil {
		return nil, err
	}
	return &model.OrderResponse{
		ID:         output.ID,
		Price:      float64(output.Price),
		Tax:        float64(output.Tax),
		FinalPrice: float64(output.FinalPrice),
	}, nil
}

// GetOrders is the resolver for the getOrders field.
func (r *queryResolver) GetOrders(ctx context.Context) (*model.OrderResponseList, error) {
	ordersDTO, err := r.GetOrdersUseCase.Execute()
	if err != nil {
		return nil, err
	}
	var ordersResponses []*model.OrderResponse
	for _, orderDTO := range ordersDTO {
		ordersResponses = append(ordersResponses, &model.OrderResponse{
			ID:         orderDTO.ID,
			Price:      orderDTO.Price,
			Tax:        orderDTO.Tax,
			FinalPrice: orderDTO.FinalPrice,
		})
	}
	return &model.OrderResponseList{Orders: ordersResponses}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
